<?php

namespace Vinyett\ConnectBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FollowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FollowRepository extends EntityRepository
{
    
    public function findFollowed($user)
    { 
        $qb = $this->createQueryBuilder("f")
                    ->addSelect(array("p"))
                    ->leftJoin("f.actor", "p")
                    ->where("f.following = :user")
                    ->setParameter("user", $user);
                    
        return $qb->getQuery()->getResult();
    }
   
   
    /**
     * Fetches the amount of followers a person has.
     * 
     * @access public
     * @param mixed $user
     * @return void
     */
    public function findFollowedByCount($user)
    { 
        $query = $this->getEntityManager()->createQuery('SELECT COUNT(f.id) FROM ConnectBundle:Follow f WHERE f.following = :user')
                    ->setParameter("user", $user);
                    
        return $query->getSingleScalarResult();
    } 
    
    
    /**
     * Fetches the amount of people a particular user follows.
     * 
     * @access public
     * @param mixed $user
     * @return void
     */
    public function findFollowingCount($user)
    { 
        $query = $this->getEntityManager()->createQuery('SELECT COUNT(f.id) FROM ConnectBundle:Follow f WHERE f.actor = :user')
                    ->setParameter("user", $user);
                    
        return $query->getSingleScalarResult();
    }
    
    
    /**
     * Finds the users that a specified user follows.
     * 
     * @access public
     * @param UserBundle/User $actor
     * @return ORM\Query
     */
    public function findFollowing($actor)
    { 
        $qb = $this->createQueryBuilder("f");
        $qb->addSelect(array("u"))
           ->leftJoin("f.following", "u")
           ->where("f.actor = :for")
           ->setParameters(array("for" => $actor));
        return $qb->getQuery()->getResult();
    }
    

}