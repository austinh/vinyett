define(['require', 'frameworks/spine'], function(require)
{
    // Generated by CoffeeScript 1.4.0
    (function() {
      var $, Ajax, Base, Collection, Extend, Include, Model, Queue, Singleton, Spine,
        __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
        __slice = [].slice;
    
      Spine = this.Spine || require('spine');
    
      $ = Spine.$;
    
      Model = Spine.Model;
    
      Queue = $({});
    
      Ajax = {
        getURL: function(object) {
          return object && (typeof object.url === "function" ? object.url() : void 0) || object.url;
        },
        enabled: true,
        disable: function(callback) {
          if (this.enabled) {
            this.enabled = false;
            try {
              return callback();
            } catch (e) {
              throw e;
            } finally {
              this.enabled = true;
            }
          } else {
            return callback();
          }
        },
        queue: function(request) {
          if (request) {
            return Queue.queue(request);
          } else {
            return Queue.queue();
          }
        },
        clearQueue: function() {
          return this.queue([]);
        }
      };
    
      Base = (function() {
    
        function Base() {}
    
        Base.prototype.defaults = {
          dataType: 'json',
          processData: false,
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        };
    
        Base.prototype.queue = Ajax.queue;
    
        Base.prototype.ajax = function(params, defaults) {
          return $.ajax(this.ajaxSettings(params, defaults));
        };
    
        Base.prototype.ajaxQueue = function(params, defaults) {
          var deferred, jqXHR, promise, request, settings;
          jqXHR = null;
          deferred = $.Deferred();
          promise = deferred.promise();
          if (!Ajax.enabled) {
            return promise;
          }
          settings = this.ajaxSettings(params, defaults);
          request = function(next) {
            return jqXHR = $.ajax(settings).done(deferred.resolve).fail(deferred.reject).then(next, next);
          };
          promise.abort = function(statusText) {
            var index;
            if (jqXHR) {
              return jqXHR.abort(statusText);
            }
            index = $.inArray(request, this.queue());
            if (index > -1) {
              this.queue().splice(index, 1);
            }
            deferred.rejectWith(settings.context || settings, [promise, statusText, '']);
            return promise;
          };
          this.queue(request);
          return promise;
        };
    
        Base.prototype.ajaxSettings = function(params, defaults) {
          return $.extend({}, this.defaults, defaults, params);
        };
    
        return Base;
    
      })();
    
      Collection = (function(_super) {
    
        __extends(Collection, _super);
    
        function Collection(model) {
          this.model = model;
          this.failResponse = __bind(this.failResponse, this);
    
          this.recordsResponse = __bind(this.recordsResponse, this);
    
        }
    
        Collection.prototype.find = function(id, params) {
          var record;
          record = new this.model({
            id: id
          });
          return this.ajaxQueue(params, {
            type: 'GET',
            url: Ajax.getURL(record)
          }).done(this.recordsResponse).fail(this.failResponse);
        };
    
        Collection.prototype.all = function(params) {
          return this.ajaxQueue(params, {
            type: 'GET',
            url: Ajax.getURL(this.model)
          }).done(this.recordsResponse).fail(this.failResponse);
        };
    
        Collection.prototype.fetch = function(params, options) {
          var id,
            _this = this;
          if (params == null) {
            params = {};
          }
          if (options == null) {
            options = {};
          }
          if (id = params.id) {
            delete params.id;
            return this.find(id, params).done(function(record) {
              return _this.model.refresh(record, options);
            });
          } else {
            return this.all(params).done(function(records) {
              return _this.model.refresh(records, options);
            });
          }
        };
    
        Collection.prototype.recordsResponse = function(data, status, xhr) {
          return this.model.trigger('ajaxSuccess', null, status, xhr);
        };
    
        Collection.prototype.failResponse = function(xhr, statusText, error) {
          return this.model.trigger('ajaxError', null, xhr, statusText, error);
        };
    
        return Collection;
    
      })(Base);
    
      Singleton = (function(_super) {
    
        __extends(Singleton, _super);
    
        function Singleton(record) {
          this.record = record;
          this.failResponse = __bind(this.failResponse, this);
    
          this.recordResponse = __bind(this.recordResponse, this);
    
          this.model = this.record.constructor;
        }
    
        Singleton.prototype.reload = function(params, options) {
          return this.ajaxQueue(params, {
            type: 'GET',
            url: Ajax.getURL(this.record)
          }).done(this.recordResponse(options)).fail(this.failResponse(options));
        };
    
        Singleton.prototype.create = function(params, options) {
          return this.ajaxQueue(params, {
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(this.record),
            url: Ajax.getURL(this.model)
          }).done(this.recordResponse(options)).fail(this.failResponse(options));
        };
    
        Singleton.prototype.update = function(params, options) {
          return this.ajaxQueue(params, {
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(this.record),
            url: Ajax.getURL(this.record)
          }).done(this.recordResponse(options)).fail(this.failResponse(options));
        };
    
        Singleton.prototype.destroy = function(params, options) {
          return this.ajaxQueue(params, {
            type: 'DELETE',
            url: Ajax.getURL(this.record)
          }).done(this.recordResponse(options)).fail(this.failResponse(options));
        };
    
        Singleton.prototype.recordResponse = function(options) {
          var _this = this;
          if (options == null) {
            options = {};
          }
          return function(data, status, xhr) {
            var _ref, _ref1;
            if (Spine.isBlank(data) || _this.record.destroyed) {
              data = false;
            } else {
              data = _this.model.fromJSON(data);
            }
            Ajax.disable(function() {
              if (data) {
                if (data.id && _this.record.id !== data.id) {
                  _this.record.changeID(data.id);
                }
                return _this.record.updateAttributes(data.attributes());
              }
            });
            _this.record.trigger('ajaxSuccess', data, status, xhr);
            if ((_ref = options.success) != null) {
              _ref.apply(_this.record);
            }
            return (_ref1 = options.done) != null ? _ref1.apply(_this.record) : void 0;
          };
        };
    
        Singleton.prototype.failResponse = function(options) {
          var _this = this;
          if (options == null) {
            options = {};
          }
          return function(xhr, statusText, error) {
            var _ref, _ref1;
            _this.record.trigger('ajaxError', xhr, statusText, error);
            if ((_ref = options.error) != null) {
              _ref.apply(_this.record);
            }
            return (_ref1 = options.fail) != null ? _ref1.apply(_this.record) : void 0;
          };
        };
    
        return Singleton;
    
      })(Base);
    
      Model.host = '';
    
      Include = {
        ajax: function() {
          return new Singleton(this);
        },
        url: function() {
          var args, url;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          url = Ajax.getURL(this.constructor);
          if (url.charAt(url.length - 1) !== '/') {
            url += '/';
          }
          url += encodeURIComponent(this.id);
          args.unshift(url);
          return args.join('/');
        }
      };
    
      Extend = {
        ajax: function() {
          return new Collection(this);
        },
        url: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          args.unshift(this.className.toLowerCase() + 's');
          args.unshift(Model.host);
          return args.join('/');
        }
      };
    
      Model.Ajax = {
        extended: function() {
          this.fetch(this.ajaxFetch);
          this.change(this.ajaxChange);
          this.extend(Extend);
          return this.include(Include);
        },
        ajaxFetch: function() {
          var _ref;
          return (_ref = this.ajax()).fetch.apply(_ref, arguments);
        },
        ajaxChange: function(record, type, options) {
          if (options == null) {
            options = {};
          }
          if (options.ajax === false) {
            return;
          }
          return record.ajax()[type](options.ajax, options);
        }
      };
    
      Model.Ajax.Methods = {
        extended: function() {
          this.extend(Extend);
          return this.include(Include);
        }
      };
    
      Ajax.defaults = Base.prototype.defaults;
    
      Spine.Ajax = Ajax;
    
      if (typeof module !== "undefined" && module !== null) {
        module.exports = Ajax;
      }
    
    }).call(this);
    
    
    /* Relations goes in here, too */
    // Generated by CoffeeScript 1.4.0
    (function() {
      var Collection, Instance, Singleton, Spine, isArray, require, singularize, underscore,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
    
      Spine = this.Spine || require('spine');
    
      isArray = Spine.isArray;
    
      require = this.require || (function(value) {
        return eval(value);
      });
    
      Collection = (function(_super) {
    
        __extends(Collection, _super);
    
        function Collection(options) {
          var key, value;
          if (options == null) {
            options = {};
          }
          for (key in options) {
            value = options[key];
            this[key] = value;
          }
        }
    
        Collection.prototype.all = function() {
          var _this = this;
          return this.model.select(function(rec) {
            return _this.associated(rec);
          });
        };
    
        Collection.prototype.first = function() {
          return this.all()[0];
        };
    
        Collection.prototype.last = function() {
          var values;
          values = this.all();
          return values[values.length - 1];
        };
    
        Collection.prototype.find = function(id) {
          var records,
            _this = this;
          records = this.select(function(rec) {
            return ("" + rec.id) === ("" + id);
          });
          if (!records[0]) {
            throw new Error("\"" + this.model.className + "\" model could not find a record for the ID \"" + id + "\"");
          }
          return records[0];
        };
    
        Collection.prototype.findAllByAttribute = function(name, value) {
          var _this = this;
          return this.model.select(function(rec) {
            return _this.associated(rec) && rec[name] === value;
          });
        };
    
        Collection.prototype.findByAttribute = function(name, value) {
          return this.findAllByAttribute(name, value)[0];
        };
    
        Collection.prototype.select = function(cb) {
          var _this = this;
          return this.model.select(function(rec) {
            return _this.associated(rec) && cb(rec);
          });
        };
    
        Collection.prototype.refresh = function(values) {
          var record, records, _i, _j, _len, _len1, _ref;
          _ref = this.all();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            record = _ref[_i];
            delete this.model.records[record.id];
          }
          records = this.model.fromJSON(values);
          if (!isArray(records)) {
            records = [records];
          }
          for (_j = 0, _len1 = records.length; _j < _len1; _j++) {
            record = records[_j];
            record.newRecord = false;
            record[this.fkey] = this.record.id;
            this.model.records[record.id] = record;
          }
          return this.model.trigger('refresh', this.model.cloneArray(records));
        };
    
        Collection.prototype.create = function(record, options) {
          record[this.fkey] = this.record.id;
          return this.model.create(record, options);
        };
    
        Collection.prototype.associated = function(record) {
          return record[this.fkey] === this.record.id;
        };
    
        return Collection;
    
      })(Spine.Module);
    
      Instance = (function(_super) {
    
        __extends(Instance, _super);
    
        function Instance(options) {
          var key, value;
          if (options == null) {
            options = {};
          }
          for (key in options) {
            value = options[key];
            this[key] = value;
          }
        }
    
        Instance.prototype.exists = function() {
          return this.record[this.fkey] && this.model.exists(this.record[this.fkey]);
        };
    
        Instance.prototype.update = function(value) {
          if (!(value instanceof this.model)) {
            value = new this.model(value);
          }
          if (value.isNew()) {
            value.save();
          }
          return this.record[this.fkey] = value && value.id;
        };
    
        return Instance;
    
      })(Spine.Module);
    
      Singleton = (function(_super) {
    
        __extends(Singleton, _super);
    
        function Singleton(options) {
          var key, value;
          if (options == null) {
            options = {};
          }
          for (key in options) {
            value = options[key];
            this[key] = value;
          }
        }
    
        Singleton.prototype.find = function() {
          return this.record.id && this.model.findByAttribute(this.fkey, this.record.id);
        };
    
        Singleton.prototype.update = function(value) {
          if (!(value instanceof this.model)) {
            value = this.model.fromJSON(value);
          }
          value[this.fkey] = this.record.id;
          return value.save();
        };
    
        return Singleton;
    
      })(Spine.Module);
    
      singularize = function(str) {
        return str.replace(/s$/, '');
      };
    
      underscore = function(str) {
        return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/-/g, '_').toLowerCase();
      };
    
      Spine.Model.extend({
        hasMany: function(name, model, fkey) {
          var association;
          if (fkey == null) {
            fkey = "" + (underscore(this.className)) + "_id";
          }
          association = function(record) {
            if (typeof model === 'string') {
              model = require(model);
            }
            return new Collection({
              name: name,
              model: model,
              record: record,
              fkey: fkey
            });
          };
          return this.prototype[name] = function(value) {
            if (value != null) {
              association(this).refresh(value);
            }
            return association(this);
          };
        },
        belongsTo: function(name, model, fkey) {
          var association;
          if (fkey == null) {
            fkey = "" + (singularize(name)) + "_id";
          }
          association = function(record) {
            if (typeof model === 'string') {
              model = require(model);
            }
            return new Instance({
              name: name,
              model: model,
              record: record,
              fkey: fkey
            });
          };
          this.prototype[name] = function(value) {
            if (value != null) {
              association(this).update(value);
            }
            return association(this).exists();
          };
          return this.attributes.push(fkey);
        },
        hasOne: function(name, model, fkey) {
          var association;
          if (fkey == null) {
            fkey = "" + (underscore(this.className)) + "_id";
          }
          association = function(record) {
            if (typeof model === 'string') {
              model = require(model);
            }
            return new Singleton({
              name: name,
              model: model,
              record: record,
              fkey: fkey
            });
          };
          return this.prototype[name] = function(value) {
            if (value != null) {
              association(this).update(value);
            }
            return association(this).find();
          };
        }
      });
    
      Spine.Collection = Collection;
    
      Spine.Singleton = Singleton;
    
      Spine.Instance = Instance;
    
    }).call(this);
});