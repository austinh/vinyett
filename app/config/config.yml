imports:
    - { resource: parameters.ini }
    - { resource: security.yml }
    - { resource: @PhotoBundle/Resources/config/admin.yml }
    - { resource: @UserBundle/Resources/config/admin.yml }
    - { resource: @BlogBundle/Resources/config/admin.yml }

#core framework
framework:
    session:
        save_path:   %kernel.root_dir%/sessions
    translator:      ~ #{ fallback: %locale% }
    secret:          %secret%
    router:          { resource: "%kernel.root_dir%/config/routing.yml" }
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme
    default_locale: %locale%
    trusted_proxies: ~
    
#FOS User Config
fos_user:
    db_driver:          orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name:      main
    user_class:         Vinyett\UserBundle\Entity\User
    registration:
        confirmation:
            enabled:    true
        form:
            type:       vinyett_registration

#Global level services?
services:
    service.amazon.s3:
        class: AmazonS3
        arguments:
            options: { certificate_authority: true, key: "AKIAJFCYUKAF2PIHPTBA", secret: "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" }  

#FOSRestBundle
fos_rest:
    allowed_methods_listener: true
    param_fetcher_listener: true
    body_listener: true
    format_listener: true   
    view:
        formats:
            json: true
    routing_loader:
        default_format: json
      
#Framework Extra  
sensio_framework_extra:
    view:    { annotations: false }
    router:  { annotations: true }

#FPNTag
fpn_tag:
    model:
        tag_class:     Vinyett\SearchBundle\Entity\Tag
        tagging_class: Vinyett\SearchBundle\Entity\Tagging

#requireJS 
hearsay_require_js:
    base_directory: %kernel.root_dir%/Resources/public/js
    require_js_src: /js/require.js
    optimizer:
        path: %kernel.root_dir%/Resources/private/js/r.js
    paths:
        frameworks: %kernel.root_dir%/Resources/public/js/frameworks
        plugins: %kernel.root_dir%/Resources/public/js/plugins
        user: '@UserBundle/Resources/public/js'
        photo: '@PhotoBundle/Resources/public/js'
        notification: '@NotificationBundle/Resources/public/js'
        stream: '@StreamBundle/Resources/public/js'
        profile: '@ProfileBundle/Resources/public/js'
        core: '@CoreServicesBundle/Resources/public/js'
        friendships: '@ConnectBundle/Resources/public/js'
     
#Mailspool   
white_october_swift_mailer_db:
    entity_class: Vinyett\CoreServicesBundle\Entity\Mail

#timeline
spy_timeline:
    paginator: ~
    render:
        path:     'StreamBundle:Timeline'
        fallback: 'StreamBundle:Timeline:default.html.twig'
        resources:
            - 'StreamBundle:Timeline:components.html.twig'
    filters:
        duplicate_key: ~
        aggregation: ~
        data_hydrator:
            priority:             20
            service:              spy_timeline.filter.data_hydrator
            filter_unresolved:    true
            locators:
                - spy_timeline.filter.data_hydrator.locator.doctrine_orm
    spread:
        on_subject: false
    drivers:
        orm:
            object_manager: doctrine.orm.entity_manager
            classes:
                query_builder: ~ # Spy\TimelineBundle\Driver\ORM\QueryBuilder\QueryBuilder
                timeline:  Vinyett\StreamBundle\Entity\Timeline
                action:    Vinyett\StreamBundle\Entity\Action
                component: Vinyett\StreamBundle\Entity\Component
                action_component: Vinyett\StreamBundle\Entity\ActionComponent

# Gregwar Image - thisname :?
gregwar_image: ~

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%
    exception_controller: 'FOS\RestBundle\Controller\ExceptionController::showAction'

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    # java: /usr/bin/java
    filters:
        cssrewrite: ~
        # closure:
        #     jar: %kernel.root_dir%/java/compiler.jar
        # yui_css:
        #     jar: %kernel.root_dir%/java/yuicompressor-2.4.2.jar

# RabbitMQ
#old_sound_rabbit_mq:
#    connections:
#        default:
#            host:      'localhost' #set to server...
#            port:      5672
#            user:      'dan'
#            password:  'Batman$311'
#            vhost:     '/'
#            lazy:      false
#    producers:
#        send_invites:
#            connection: default
#            exchange_options: {name: 'send-invites', type: direct}
#    consumers:
#        upload_picture:
#            connection: default
#            exchange_options: {name: 'send-invites', type: direct}
#            queue_options:    {name: 'send-invites'}
#            callback:         send_invite_service

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        auto_mapping: true

#mongodb Doctrine config
#doctrine_mongodb:
#    connections:
#        default:
#            server:     mongodb://localhost:27017
#            options:
#                connect: true
#    default_database: Vinyett
#    document_managers:
#        default:
#            auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport:  smtp
    encryption: ssl
    host:       smtp.gmail.com
    username:   robo@vinyett.com
    password:   'Batman$311'
#    spool:
#        type: db
    
#notification
notification:
    events:
        photo.comment: 
            reference: Vinyett\NotificationBundle\Event\PhotoCommentNotificationEvent
        photo.like:
            reference: Vinyett\NotificationBundle\Event\PhotoLikeNotificationEvent
        friend.join:
            reference: Vinyett\NotificationBundle\Event\FriendJoinNotificationEvent
        follow.add:
            reference: Vinyett\NotificationBundle\Event\FollowAddNotificationEvent
        
    transports:
        notification:   
            class:  Vinyett\NotificationBundle\Transport\NotificationTransport
            default_event: true
        email:          
            class:  Vinyett\NotificationBundle\Transport\EmailTransport
            default_event: false
            events:
                photo.comment: true
                photo.like: false
                friend.join: true
                follow.add: true
    

jms_security_extra:
    secure_all_services: false
    
jms_serializer:
    metadata:
        directories:
            FOSUB:
                namespace_prefix: "FOS\\UserBundle"
                path: "%kernel.root_dir%/serializer/FOSUB"
                
cybernox_amazon_web_services:
    key:                        AKIAIXQ6GL5FHPN2V64A
    secret:                     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
    default_cache_config:       apc
    certificate_authority:      true  
    
knp_gaufrette: 
    adapters:
        s3_vinyett_adapter:
            amazon_s3:
                amazon_s3_id: service.amazon.s3
                bucket_name: "photos.vinyett.com"
                create: true
    filesystems:
        photo_store:
            adapter: s3_vinyett_adapter

#admin
sonata_admin:
    title:      Vinyett Admin Dashboard
    title_logo: /bundles/sonataadmin/logo_title.png
    templates:
        # default global templates
        layout:  SonataAdminBundle::standard_layout.html.twig
        ajax:    SonataAdminBundle::ajax_layout.html.twig

        # default actions templates, should extend a global templates
        list:    SonataAdminBundle:CRUD:list.html.twig
        show:    SonataAdminBundle:CRUD:show.html.twig
        edit:    SonataAdminBundle:CRUD:edit.html.twig

    dashboard:
        blocks:
            # display a dashboard block
            - { position: left, type: sonata.admin.block.admin_list }
            
sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.rss:
        